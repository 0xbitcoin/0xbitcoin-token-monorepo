{
  "address": "0x6b187A660a803B8FB95ddba1d25feafb25e517bf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "ActionNotAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumOwed",
          "type": "uint256"
        }
      ],
      "name": "PaymentNotMinimum",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "name": "AcceptedBid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        }
      ],
      "name": "CancelledBid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        }
      ],
      "name": "LoanRepaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        }
      ],
      "name": "LoanRepayment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "newFee",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "oldFee",
          "type": "uint16"
        }
      ],
      "name": "ProtocolFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "metadataURI",
          "type": "bytes32"
        }
      ],
      "name": "SubmittedBid",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lendingToken",
          "type": "address"
        }
      ],
      "name": "addLendingToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bidId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bids",
      "outputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "marketplaceId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "metadataURI",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "lendingToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "interest",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "principal",
                  "type": "uint256"
                }
              ],
              "internalType": "struct TellerV2.Payment",
              "name": "totalRepaid",
              "type": "tuple"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "acceptedTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "lastRepaidTimestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "loanDuration",
              "type": "uint32"
            }
          ],
          "internalType": "struct TellerV2.LoanDetails",
          "name": "loanDetails",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "paymentCycle",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "APY",
              "type": "uint16"
            }
          ],
          "internalType": "struct TellerV2.Terms",
          "name": "terms",
          "type": "tuple"
        },
        {
          "internalType": "enum TellerV2.BidState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "borrowerBids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "calculateAmountDue",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "interest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            }
          ],
          "internalType": "struct TellerV2.Payment",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidId",
          "type": "uint256"
        }
      ],
      "name": "calculateAmountDue",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "interest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            }
          ],
          "internalType": "struct TellerV2.Payment",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "calculateAmountOwed",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "interest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            }
          ],
          "internalType": "struct TellerV2.Payment",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidId",
          "type": "uint256"
        }
      ],
      "name": "calculateAmountOwed",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "interest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            }
          ],
          "internalType": "struct TellerV2.Payment",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidId",
          "type": "uint256"
        }
      ],
      "name": "calculateNextDueDate",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "dueDate_",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidId",
          "type": "uint256"
        }
      ],
      "name": "cancelBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLendingTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_protocolFee",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_marketRegistry",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_lendingTokens",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidId",
          "type": "uint256"
        }
      ],
      "name": "isPaymentLate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidId",
          "type": "uint256"
        }
      ],
      "name": "lastRepaidTimestamp",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidId",
          "type": "uint256"
        }
      ],
      "name": "lenderAcceptBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lenderVolumeFilled",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lendingToken",
          "type": "address"
        }
      ],
      "name": "removeLendingToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "repayLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidId",
          "type": "uint256"
        }
      ],
      "name": "repayLoanFull",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bidId",
          "type": "uint256"
        }
      ],
      "name": "repayLoanMinimum",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "newFee",
          "type": "uint16"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lendingToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketplaceId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_principal",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_APY",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "_paymentCycle",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_metadataURI",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "submitBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalVolumeFilled",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "artifactName": "TellerV2",
  "transactionHash": "0x505053e6f1c288c40350d83ec98e93edd468adef62334dc1d29075971822bfed",
  "receipt": {
    "to": null,
    "from": "0xAFe87013dc96edE1E116a288D80FcaA0eFFE5fe5",
    "contractAddress": "0x6b187A660a803B8FB95ddba1d25feafb25e517bf",
    "transactionIndex": 56,
    "gasUsed": "2146422",
    "logsBloom": "0x
    "blockHash": "0xeadc69fb0253ce6de45cd234cb7975e4a8a0f6947353a7056fc338b2698ed697",
    "transactionHash": "0x505053e6f1c288c40350d83ec98e93edd468adef62334dc1d29075971822bfed",
    "logs": [],
    "blockNumber": 10247626,
    "cumulativeGasUsed": "24436176",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "98677f32543e021ed724a7a87aae15c4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"ActionNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumOwed\",\"type\":\"uint256\"}],\"name\":\"PaymentNotMinimum\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"AcceptedBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"CancelledBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"LoanRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"LoanRepayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldFee\",\"type\":\"uint16\"}],\"name\":\"ProtocolFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"metadataURI\",\"type\":\"bytes32\"}],\"name\":\"SubmittedBid\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lendingToken\",\"type\":\"address\"}],\"name\":\"addLendingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bids\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketplaceId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"metadataURI\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"lendingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"}],\"internalType\":\"struct TellerV2.Payment\",\"name\":\"totalRepaid\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"acceptedTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastRepaidTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"loanDuration\",\"type\":\"uint32\"}],\"internalType\":\"struct TellerV2.LoanDetails\",\"name\":\"loanDetails\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"paymentCycle\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"APY\",\"type\":\"uint16\"}],\"internalType\":\"struct TellerV2.Terms\",\"name\":\"terms\",\"type\":\"tuple\"},{\"internalType\":\"enum TellerV2.BidState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"borrowerBids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"calculateAmountDue\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"}],\"internalType\":\"struct TellerV2.Payment\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"}],\"name\":\"calculateAmountDue\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"}],\"internalType\":\"struct TellerV2.Payment\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"calculateAmountOwed\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"}],\"internalType\":\"struct TellerV2.Payment\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"}],\"name\":\"calculateAmountOwed\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"}],\"internalType\":\"struct TellerV2.Payment\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"}],\"name\":\"calculateNextDueDate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"dueDate_\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"}],\"name\":\"cancelBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLendingTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_protocolFee\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_marketRegistry\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_lendingTokens\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"}],\"name\":\"isPaymentLate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"}],\"name\":\"lastRepaidTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"}],\"name\":\"lenderAcceptBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lenderVolumeFilled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lendingToken\",\"type\":\"address\"}],\"name\":\"removeLendingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repayLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"}],\"name\":\"repayLoanFull\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"}],\"name\":\"repayLoanMinimum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newFee\",\"type\":\"uint16\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lendingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketplaceId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_principal\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_APY\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"_paymentCycle\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_metadataURI\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"submitBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVolumeFilled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ActionNotAllowed(uint256,string,string)\":[{\"params\":{\"action\":\"The action string (i.e: 'repayLoan', 'cancelBid', 'etc)\",\"bidId\":\"The id of the bid.\",\"message\":\"The message string to return to the user explaining why the tx was reverted\"}}],\"PaymentNotMinimum(uint256,uint256,uint256)\":[{\"params\":{\"bidId\":\"The id of the bid the borrower is attempting to repay.\",\"minimumOwed\":\"The minimum owed value\",\"payment\":\"The payment made by the borrower\"}}]},\"events\":{\"AcceptedBid(uint256,address)\":{\"params\":{\"bidId\":\"The id of the bid accepted.\",\"lender\":\"The address of the accepted bid lender.\"}},\"CancelledBid(uint256)\":{\"params\":{\"bidId\":\"The id of the cancelled bid.\"}},\"LoanRepaid(uint256)\":{\"params\":{\"bidId\":\"The id of the bid/loan which was repaid.\"}},\"LoanRepayment(uint256)\":{\"params\":{\"bidId\":\"The id of the bid/loan to which the payment was made.\"}},\"SubmittedBid(uint256,address,address,bytes32)\":{\"params\":{\"bidId\":\"The id of the bid submitted.\",\"borrower\":\"The address of the bid borrower.\",\"metadataURI\":\"URI for additional bid infomation as part of loan bid.\"}}},\"kind\":\"dev\",\"methods\":{\"addLendingToken(address)\":{\"params\":{\"_lendingToken\":\"The contract address of the lending token.\"}},\"calculateAmountDue(uint256)\":{\"params\":{\"_bidId\":\"The id of the loan bid to get the payment amount for.\"}},\"calculateAmountDue(uint256,uint256)\":{\"params\":{\"_bidId\":\"The id of the loan bid to get the payment amount for.\",\"_timestamp\":\"The timestamp at which to get the due payment at.\"}},\"calculateAmountOwed(uint256)\":{\"params\":{\"_bidId\":\"The id of the loan bid to caculate the owed amount for.\"}},\"calculateAmountOwed(uint256,uint256)\":{\"params\":{\"_bidId\":\"The id of the loan bid to caculate the owed amount for.\",\"_timestamp\":\"The timestamp at which to cacluate the loan owed amount at.\"}},\"calculateNextDueDate(uint256)\":{\"params\":{\"_bidId\":\"The id of the loan bid.\"}},\"cancelBid(uint256)\":{\"params\":{\"_bidId\":\"The id of the bid to be cancelled.\"}},\"initialize(uint16,address,address[])\":{\"params\":{\"_lendingTokens\":\"The list of tokens allowed as lending assets on the protocol.\",\"_protocolFee\":\"The fee collected by the protocol for loan processing.\"}},\"isPaymentLate(uint256)\":{\"params\":{\"_bidId\":\"The id of the loan bid to check for.\"}},\"lastRepaidTimestamp(uint256)\":{\"params\":{\"_bidId\":\"The id of the loan bid to get the timestamp for.\"}},\"lenderAcceptBid(uint256)\":{\"params\":{\"_bidId\":\"The id of the loan bid to accept.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeLendingToken(address)\":{\"params\":{\"_lendingToken\":\"The contract address of the lending token.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"repayLoan(uint256,uint256)\":{\"params\":{\"_amount\":\"The amount of the payment.\",\"_bidId\":\"The id of the loan to make the payment towards.\"}},\"repayLoanFull(uint256)\":{\"params\":{\"_bidId\":\"The id of the loan to make the payment towards.\"}},\"repayLoanMinimum(uint256)\":{\"params\":{\"_bidId\":\"The id of the loan to make the payment towards.\"}},\"setProtocolFee(uint16)\":{\"params\":{\"newFee\":\"The new protocol fee to be set.\"}},\"submitBid(address,uint256,uint256,uint16,uint32,bytes32,address)\":{\"params\":{\"_APY\":\"The proposed interest rate for the loan bid.\",\"_lendingToken\":\"The lending token asset requested to be borrowed.\",\"_metadataURI\":\"The URI for additional borrower loan infomation as part of loan bid.\",\"_paymentCycle\":\"The recurrent length of time before which a payment is due.\",\"_principal\":\"The prinicpal amount of the loan bid.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ActionNotAllowed(uint256,string,string)\":[{\"notice\":\"This error is reverted when the action isn't allowed\"}],\"PaymentNotMinimum(uint256,uint256,uint256)\":[{\"notice\":\"This error is reverted when repayment amount is less than the required minimum\"}]},\"events\":{\"AcceptedBid(uint256,address)\":{\"notice\":\"This event is emitted when a bid has been accepted by a lender.\"},\"CancelledBid(uint256)\":{\"notice\":\"This event is emitted when a previously submitted bid has been cancelled.\"},\"LoanRepaid(uint256)\":{\"notice\":\"This event is emitted when a loan has been fully repaid.\"},\"LoanRepayment(uint256)\":{\"notice\":\"This event is emitted when a payment is made towards an ative loan.\"},\"ProtocolFeeSet(uint16,uint16)\":{\"notice\":\"This event is emitted when the protocol fee has been updated.\"},\"SubmittedBid(uint256,address,address,bytes32)\":{\"notice\":\"This event is emitted when a new bid is submitted.\"}},\"kind\":\"user\",\"methods\":{\"addLendingToken(address)\":{\"notice\":\"Lets the DAO/owner of the protocol add an authorized lending token.\"},\"bidId()\":{\"notice\":\"Storage Variables \"},\"calculateAmountDue(uint256)\":{\"notice\":\"Calculates the minumum payment amount due for a loan.\"},\"calculateAmountDue(uint256,uint256)\":{\"notice\":\"Calculates the minumum payment amount due for a loan at a specific timestamp.\"},\"calculateAmountOwed(uint256)\":{\"notice\":\"Calculates the total amount owed for a bid.\"},\"calculateAmountOwed(uint256,uint256)\":{\"notice\":\"Calculates the total amount owed for a loan bid at a specific timestamp.\"},\"calculateNextDueDate(uint256)\":{\"notice\":\"Returns the next due date for a loan payment.\"},\"cancelBid(uint256)\":{\"notice\":\"Function for users to cancel a bid.\"},\"getLendingTokens()\":{\"notice\":\"Returns the list of authorized tokens on the protocol.\"},\"initialize(uint16,address,address[])\":{\"notice\":\"Initializes the proxy.\"},\"isPaymentLate(uint256)\":{\"notice\":\"Checks to see if a borrower is delinquent.\"},\"lastRepaidTimestamp(uint256)\":{\"notice\":\"Returns the last repaid timestamp for a loan.\"},\"lenderAcceptBid(uint256)\":{\"notice\":\"Function for a lender to accept a proposed loan bid.\"},\"protocolFee()\":{\"notice\":\"Returns the current protocol fee.\"},\"removeLendingToken(address)\":{\"notice\":\"Lets the DAO/owner of the protocol remove an authorized lending token.\"},\"repayLoan(uint256,uint256)\":{\"notice\":\"Function for users to make a payment towards an active loan.\"},\"repayLoanFull(uint256)\":{\"notice\":\"Function for users to repay an active loan in full.\"},\"repayLoanMinimum(uint256)\":{\"notice\":\"Function for users to make the minimum amount due for an active loan.\"},\"setProtocolFee(uint16)\":{\"notice\":\"Lets the DAO/owner of the protocol to set a new protocol fee.\"},\"submitBid(address,uint256,uint256,uint16,uint32,bytes32,address)\":{\"notice\":\"Function for a borrower to create a bid for a loan.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TellerV2.sol\":\"TellerV2\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x47c0131bd8a972c31596958aa86752ea18d60e33f1cd94d412b9e29fd6ab25a6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xfac19be5f0d198ac556731a5589a4ae1c0c1622437d0b6b53b2cf3f317071acd\",\"license\":\"MIT\"},\"contracts/ProtocolFee.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract ProtocolFee is OwnableUpgradeable {\\n    // Protocol fee set for loan processing.\\n    uint16 private _protocolFee;\\n\\n    /**\\n     * @notice This event is emitted when the protocol fee has been updated.\\n     * @param newFee The new protocol fee set.\\n     * @param oldFee The previously set protocol fee.\\n     */\\n    event ProtocolFeeSet(uint16 newFee, uint16 oldFee);\\n\\n    /**\\n     * @notice Initialized the protocol fee.\\n     * @param initFee The initial protocol fee to be set on the protocol.\\n     */\\n    function __ProtocolFee_init(uint16 initFee) internal onlyInitializing {\\n        __Ownable_init();\\n        __ProtocolFee_init_unchained(initFee);\\n    }\\n\\n    function __ProtocolFee_init_unchained(uint16 initFee)\\n        internal\\n        onlyInitializing\\n    {\\n        setProtocolFee(initFee);\\n    }\\n\\n    /**\\n     * @notice Returns the current protocol fee.\\n     */\\n    function protocolFee() public view virtual returns (uint16) {\\n        return _protocolFee;\\n    }\\n\\n    /**\\n     * @notice Lets the DAO/owner of the protocol to set a new protocol fee.\\n     * @param newFee The new protocol fee to be set.\\n     */\\n    function setProtocolFee(uint16 newFee) public virtual onlyOwner {\\n        // Skip if the fee is the same\\n        if (newFee == _protocolFee) return;\\n\\n        uint16 oldFee = _protocolFee;\\n        _protocolFee = newFee;\\n        emit ProtocolFeeSet(newFee, oldFee);\\n    }\\n}\\n\",\"keccak256\":\"0x8a4fbca87131233a11efc1c5006a9b9d5ea45b82078c85726ce9e07ef13e2893\",\"license\":\"MIT\"},\"contracts/TellerV2.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./ProtocolFee.sol\\\";\\nimport \\\"./interfaces/IMarketRegistry.sol\\\";\\n\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./libraries/NumbersLib.sol\\\";\\n\\n/* Errors */\\n/**\\n * @notice This error is reverted when the action isn't allowed\\n * @param bidId The id of the bid.\\n * @param action The action string (i.e: 'repayLoan', 'cancelBid', 'etc)\\n * @param message The message string to return to the user explaining why the tx was reverted\\n */\\nerror ActionNotAllowed(uint256 bidId, string action, string message);\\n\\n/**\\n * @notice This error is reverted when repayment amount is less than the required minimum\\n * @param bidId The id of the bid the borrower is attempting to repay.\\n * @param payment The payment made by the borrower\\n * @param minimumOwed The minimum owed value\\n */\\nerror PaymentNotMinimum(uint256 bidId, uint256 payment, uint256 minimumOwed);\\n\\ncontract TellerV2 is ProtocolFee {\\n    using Address for address;\\n    using TransferHelper for IERC20;\\n    using NumbersLib for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    struct Payment {\\n        uint256 interest;\\n        uint256 principal;\\n    }\\n\\n    struct LoanDetails {\\n        IERC20 lendingToken;\\n        uint256 principal;\\n        Payment totalRepaid;\\n        uint32 timestamp;\\n        uint32 acceptedTimestamp;\\n        uint32 lastRepaidTimestamp;\\n        uint32 loanDuration;\\n    }\\n\\n    struct Bid {\\n        address borrower;\\n        address receiver;\\n        address lender;\\n        uint256 marketplaceId;\\n        bytes32 metadataURI;\\n        LoanDetails loanDetails;\\n        Terms terms;\\n        BidState state;\\n    }\\n\\n    struct Terms {\\n        uint32 paymentCycle;\\n        uint16 APY;\\n    }\\n\\n    enum BidState {\\n        NONEXISTENT,\\n        PENDING,\\n        CANCELLED,\\n        ACCEPTED,\\n        PAID\\n    }\\n\\n    /** Storage Variables */\\n\\n    // Current number of bids.\\n    uint256 public bidId = 0;\\n\\n    // Mapping of bidId to bid information.\\n    mapping(uint256 => Bid) public bids;\\n\\n    // Mapping of borrowers to borrower requests.\\n    mapping(address => uint256[]) public borrowerBids;\\n\\n    // Mapping of volume filled by lenders.\\n    mapping(address => uint256) public lenderVolumeFilled;\\n\\n    // Volume filled by all lenders.\\n    uint256 public totalVolumeFilled;\\n\\n    // List of allowed lending tokens\\n    EnumerableSet.AddressSet private lendingTokensSet;\\n\\n    IMarketRegistry marketRegistry;\\n\\n    /** Events */\\n\\n    /**\\n     * @notice This event is emitted when a new bid is submitted.\\n     * @param bidId The id of the bid submitted.\\n     * @param borrower The address of the bid borrower.\\n     * @param metadataURI URI for additional bid infomation as part of loan bid.\\n     */\\n    event SubmittedBid(\\n        uint256 indexed bidId,\\n        address indexed borrower,\\n        address receiver,\\n        bytes32 indexed metadataURI\\n    );\\n\\n    /**\\n     * @notice This event is emitted when a bid has been accepted by a lender.\\n     * @param bidId The id of the bid accepted.\\n     * @param lender The address of the accepted bid lender.\\n     */\\n    event AcceptedBid(uint256 indexed bidId, address indexed lender);\\n\\n    /**\\n     * @notice This event is emitted when a previously submitted bid has been cancelled.\\n     * @param bidId The id of the cancelled bid.\\n     */\\n    event CancelledBid(uint256 indexed bidId);\\n\\n    /**\\n     * @notice This event is emitted when a payment is made towards an ative loan.\\n     * @param bidId The id of the bid/loan to which the payment was made.\\n     */\\n    event LoanRepayment(uint256 indexed bidId);\\n\\n    /**\\n     * @notice This event is emitted when a loan has been fully repaid.\\n     * @param bidId The id of the bid/loan which was repaid.\\n     */\\n    event LoanRepaid(uint256 indexed bidId);\\n\\n    /** Modifiers */\\n\\n    /**\\n     * @notice This modifier is used to check if the state of a bid is pending, before running an action.\\n     * @param _bidId The id of the bid to check the state for.\\n     * @param _action The desired action to run on the bid.\\n     */\\n    modifier pendingBid(uint256 _bidId, string memory _action) {\\n        if (bids[_bidId].state != BidState.PENDING) {\\n            revert ActionNotAllowed(_bidId, _action, \\\"Bid must be pending\\\");\\n        }\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice This modifer is used to check if the state of a loan has been accepted, before running an action.\\n     * @param _bidId The id of the bid to check the state for.\\n     * @param _action The desired action to run on the bid.\\n     */\\n    modifier acceptedLoan(uint256 _bidId, string memory _action) {\\n        if (bids[_bidId].state != BidState.ACCEPTED) {\\n            revert ActionNotAllowed(_bidId, _action, \\\"Loan must be accepted\\\");\\n        }\\n\\n        _;\\n    }\\n\\n    /** External Functions */\\n\\n    /**\\n     * @notice Initializes the proxy.\\n     * @param _protocolFee The fee collected by the protocol for loan processing.\\n     * @param _lendingTokens The list of tokens allowed as lending assets on the protocol.\\n     */\\n    function initialize(\\n        uint16 _protocolFee,\\n        address _marketRegistry,\\n        address[] memory _lendingTokens\\n    ) external initializer {\\n        __ProtocolFee_init(_protocolFee);\\n\\n        marketRegistry = IMarketRegistry(_marketRegistry);\\n\\n        require(_lendingTokens.length > 0, \\\"No lending tokens specified\\\");\\n        for (uint256 i = 0; i < _lendingTokens.length; i++) {\\n            require(\\n                _lendingTokens[i].isContract(),\\n                \\\"lending token not contract\\\"\\n            );\\n            addLendingToken(_lendingTokens[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Function for a borrower to create a bid for a loan.\\n     * @param _lendingToken The lending token asset requested to be borrowed.\\n     * @param _principal The prinicpal amount of the loan bid.\\n     * @param _APY The proposed interest rate for the loan bid.\\n     * @param _paymentCycle The recurrent length of time before which a payment is due.\\n     * @param _metadataURI The URI for additional borrower loan infomation as part of loan bid.\\n     */\\n    function submitBid(\\n        address _lendingToken,\\n        uint256 _marketplaceId,\\n        uint256 _principal,\\n        uint16 _APY,\\n        uint32 _paymentCycle,\\n        bytes32 _metadataURI,\\n        address _receiver\\n    ) external {\\n        require(\\n            lendingTokensSet.contains(_lendingToken),\\n            \\\"Lending token not authorized\\\"\\n        );\\n\\n        // Create and store our bid into the mapping\\n        Bid storage bid = bids[bidId];\\n        bid.borrower = _msgSender();\\n        bid.receiver = _receiver != address(0) ? _receiver : _msgSender();\\n        bid.marketplaceId = _marketplaceId;\\n        bid.loanDetails.lendingToken = IERC20(_lendingToken);\\n        bid.loanDetails.principal = _principal;\\n        bid.loanDetails.timestamp = uint32(block.timestamp);\\n        bid.terms.paymentCycle = _paymentCycle;\\n        bid.terms.APY = _APY;\\n        bid.metadataURI = _metadataURI;\\n        bid.state = BidState.PENDING;\\n\\n        emit SubmittedBid(bidId, bid.borrower, bid.receiver, _metadataURI);\\n\\n        // Store bid inside borrower bids mapping\\n        borrowerBids[_msgSender()].push(bidId);\\n\\n        // Increment bid id counter\\n        bidId++;\\n    }\\n\\n    /**\\n     * @notice Function for users to cancel a bid.\\n     * @param _bidId The id of the bid to be cancelled.\\n     */\\n    function cancelBid(uint256 _bidId)\\n        external\\n        pendingBid(_bidId, \\\"cancelBid\\\")\\n    {\\n        // Retrieve bid\\n        Bid storage bid = bids[_bidId];\\n\\n        if (bid.borrower != _msgSender()) {\\n            revert ActionNotAllowed({\\n                bidId: _bidId,\\n                action: \\\"cancelBid\\\",\\n                message: \\\"Only the bid owner can cancel!\\\"\\n            });\\n        }\\n\\n        // Set the bid state to CANCELLED\\n        bid.state = BidState.CANCELLED;\\n\\n        // Emit CancelledBid event\\n        emit CancelledBid(_bidId);\\n    }\\n\\n    /**\\n     * @notice Function for a lender to accept a proposed loan bid.\\n     * @param _bidId The id of the loan bid to accept.\\n     */\\n    function lenderAcceptBid(uint256 _bidId)\\n        external\\n        pendingBid(_bidId, \\\"lenderAcceptBid\\\")\\n    {\\n        // Retrieve bid\\n        Bid storage bid = bids[_bidId];\\n\\n        require(\\n            marketRegistry.isVerifiedLender(bid.marketplaceId, _msgSender()),\\n            \\\"Not verified lender\\\"\\n        );\\n\\n        // Set timestamp\\n        bid.loanDetails.acceptedTimestamp = uint32(block.timestamp);\\n\\n        // Mark borrower's request as accepted\\n        bid.state = BidState.ACCEPTED;\\n\\n        // Declare the bid acceptor as the lender of the bid\\n        bid.lender = _msgSender();\\n\\n        // Transfer funds to borrower from the lender\\n        uint256 amountToProtocol = bid.loanDetails.principal.percent(\\n            protocolFee()\\n        );\\n        uint256 amountToBorrower = bid.loanDetails.principal - amountToProtocol;\\n        bid.loanDetails.lendingToken.transferFromWithFee(\\n            _msgSender(),\\n            bid.receiver,\\n            amountToBorrower,\\n            owner(),\\n            amountToProtocol\\n        );\\n\\n        // Record volume filled by lenders\\n        lenderVolumeFilled[_msgSender()] += bid.loanDetails.principal;\\n        totalVolumeFilled += bid.loanDetails.principal;\\n\\n        // Emit AcceptedBid\\n        emit AcceptedBid(_bidId, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Function for users to make the minimum amount due for an active loan.\\n     * @param _bidId The id of the loan to make the payment towards.\\n     */\\n    function repayLoanMinimum(uint256 _bidId)\\n        external\\n        acceptedLoan(_bidId, \\\"repayLoan\\\")\\n    {\\n        Bid storage bid = bids[_bidId];\\n        Payment memory owed = V2Calculations.calculateAmountOwed(\\n            bid,\\n            block.timestamp\\n        );\\n        Payment memory due = _calculateAmountDue(bid, owed);\\n        _repayLoan(_bidId, bid, due, owed);\\n    }\\n\\n    /**\\n     * @notice Function for users to repay an active loan in full.\\n     * @param _bidId The id of the loan to make the payment towards.\\n     */\\n    function repayLoanFull(uint256 _bidId)\\n        external\\n        acceptedLoan(_bidId, \\\"repayLoan\\\")\\n    {\\n        Bid storage bid = bids[_bidId];\\n        Payment memory owed = V2Calculations.calculateAmountOwed(\\n            bid,\\n            block.timestamp\\n        );\\n        _repayLoan(_bidId, bid, owed, owed);\\n    }\\n\\n    // function that the borrower (ideally) sends to repay the loan\\n    /**\\n     * @notice Function for users to make a payment towards an active loan.\\n     * @param _bidId The id of the loan to make the payment towards.\\n     * @param _amount The amount of the payment.\\n     */\\n    function repayLoan(uint256 _bidId, uint256 _amount)\\n        external\\n        acceptedLoan(_bidId, \\\"repayLoan\\\")\\n    {\\n        // Retrieve bid\\n        Bid storage bid = bids[_bidId];\\n        Payment memory owed = V2Calculations.calculateAmountOwed(\\n            bid,\\n            block.timestamp\\n        );\\n        Payment memory due = _calculateAmountDue(bid, owed);\\n        uint256 minimumOwed = due.principal + due.interest;\\n\\n        // If amount is less than minimumOwed, we revert\\n        if (_amount < minimumOwed) {\\n            revert PaymentNotMinimum(_bidId, _amount, minimumOwed);\\n        }\\n\\n        // Calculate payment value\\n        Payment memory payment = Payment({\\n            principal: _amount - due.interest,\\n            interest: due.interest\\n        });\\n        _repayLoan(_bidId, bid, payment, owed);\\n    }\\n\\n    /**\\n     * @notice Internal function to make a loan payment.\\n     * @param _bidId The id of the loan to make the payment towards.\\n     * @param _bid The associated Bid struct of the loan details.\\n     * @param _payment The Payment struct with payments amounts towards principal and interest respectively.\\n     * @param _owed The Payment struct with owed amounts of principal and interest respectively.\\n     */\\n    function _repayLoan(\\n        uint256 _bidId,\\n        Bid storage _bid,\\n        Payment memory _payment,\\n        Payment memory _owed\\n    ) internal {\\n        uint256 paymentAmount = _payment.principal + _payment.interest;\\n        uint256 owedAmount = _owed.principal + _owed.interest;\\n\\n        // Check if we are sending a payment or amount remaining\\n        if (paymentAmount >= owedAmount) {\\n            paymentAmount = owedAmount;\\n            _bid.state = BidState.PAID;\\n            emit LoanRepaid(_bidId);\\n        } else {\\n            emit LoanRepayment(_bidId);\\n        }\\n        // Send payment to the lender\\n        _bid.loanDetails.lendingToken.transferFrom(\\n            _msgSender(),\\n            _bid.lender,\\n            paymentAmount\\n        );\\n\\n        // update our mappings\\n        _bid.loanDetails.totalRepaid.principal += _payment.principal;\\n        _bid.loanDetails.totalRepaid.interest += _payment.interest;\\n        _bid.loanDetails.lastRepaidTimestamp = uint32(block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Calculates the total amount owed for a bid.\\n     * @param _bidId The id of the loan bid to caculate the owed amount for.\\n     */\\n    function calculateAmountOwed(uint256 _bidId)\\n        public\\n        view\\n        acceptedLoan(_bidId, \\\"calculateAmountOwed\\\")\\n        returns (Payment memory)\\n    {\\n        return\\n            V2Calculations.calculateAmountOwed(bids[_bidId], block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Calculates the total amount owed for a loan bid at a specific timestamp.\\n     * @param _bidId The id of the loan bid to caculate the owed amount for.\\n     * @param _timestamp The timestamp at which to cacluate the loan owed amount at.\\n     */\\n    function calculateAmountOwed(uint256 _bidId, uint256 _timestamp)\\n        public\\n        view\\n        returns (Payment memory)\\n    {\\n        Bid storage bid = bids[_bidId];\\n        require(\\n            bid.loanDetails.acceptedTimestamp <= _timestamp,\\n            \\\"timestamp before accepted\\\"\\n        );\\n        return V2Calculations.calculateAmountOwed(bid, _timestamp);\\n    }\\n\\n    /**\\n     * @notice Calculates the minumum payment amount due for a loan.\\n     * @param _bidId The id of the loan bid to get the payment amount for.\\n     */\\n    function calculateAmountDue(uint256 _bidId)\\n        public\\n        view\\n        acceptedLoan(_bidId, \\\"calculateAmountDue\\\")\\n        returns (Payment memory)\\n    {\\n        Bid storage bid = bids[_bidId];\\n        return\\n            _calculateAmountDue(\\n                bid,\\n                V2Calculations.calculateAmountOwed(bid, block.timestamp)\\n            );\\n    }\\n\\n    /**\\n     * @notice Calculates the minumum payment amount due for a loan at a specific timestamp.\\n     * @param _bidId The id of the loan bid to get the payment amount for.\\n     * @param _timestamp The timestamp at which to get the due payment at.\\n     */\\n    function calculateAmountDue(uint256 _bidId, uint256 _timestamp)\\n        public\\n        view\\n        returns (Payment memory)\\n    {\\n        Bid storage bid = bids[_bidId];\\n        require(\\n            bid.loanDetails.acceptedTimestamp <= _timestamp,\\n            \\\"timestamp before accepted\\\"\\n        );\\n        return\\n            _calculateAmountDue(\\n                bid,\\n                V2Calculations.calculateAmountOwed(bid, _timestamp)\\n            );\\n    }\\n\\n    /**\\n     * @notice Internal function to calculate the amount due for a loan.\\n     * @param _owed The total principal and interest owed amount.\\n     */\\n    function _calculateAmountDue(\\n        Bid storage, /* _bid */\\n        Payment memory _owed\\n    ) internal pure returns (Payment memory due_) {\\n        // TODO: principal amount due defined by market / lender\\n        due_.interest = _owed.interest;\\n    }\\n\\n    /**\\n     * @notice Returns the next due date for a loan payment.\\n     * @param _bidId The id of the loan bid.\\n     */\\n    function calculateNextDueDate(uint256 _bidId)\\n        public\\n        view\\n        acceptedLoan(_bidId, \\\"calculateNextDueDate\\\")\\n        returns (uint32 dueDate_)\\n    {\\n        Bid storage bid = bids[_bidId];\\n\\n        // Check if the bid has a duration\\n        if (bid.loanDetails.loanDuration > 0) {\\n            uint32 endTimestamp = bid.loanDetails.acceptedTimestamp +\\n                bid.loanDetails.loanDuration;\\n            if (block.timestamp > endTimestamp) return endTimestamp;\\n        }\\n\\n        // Start with the original due date being 1 payment cycle since bid was accepted\\n        dueDate_ = bid.loanDetails.acceptedTimestamp + bid.terms.paymentCycle;\\n\\n        // Calculate the cycle number the last repayment was made\\n        uint32 delta = lastRepaidTimestamp(_bidId) -\\n            bid.loanDetails.acceptedTimestamp;\\n        if (delta > 0) {\\n            uint32 repaymentCycle = 1 + (delta / bid.terms.paymentCycle);\\n            dueDate_ += (repaymentCycle * bid.terms.paymentCycle);\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks to see if a borrower is delinquent.\\n     * @param _bidId The id of the loan bid to check for.\\n     */\\n    function isPaymentLate(uint256 _bidId)\\n        public\\n        view\\n        acceptedLoan(_bidId, \\\"isPaymentLate\\\")\\n        returns (bool)\\n    {\\n        return uint32(block.timestamp) > calculateNextDueDate(_bidId);\\n    }\\n\\n    /**\\n     * @notice Returns the last repaid timestamp for a loan.\\n     * @param _bidId The id of the loan bid to get the timestamp for.\\n     */\\n    function lastRepaidTimestamp(uint256 _bidId)\\n        public\\n        view\\n        acceptedLoan(_bidId, \\\"lastRepaidTimestamp\\\")\\n        returns (uint32)\\n    {\\n        return V2Calculations.lastRepaidTimestamp(bids[_bidId]);\\n    }\\n\\n    /**\\n     * @notice Returns the list of authorized tokens on the protocol.\\n     */\\n    function getLendingTokens() public view returns (address[] memory) {\\n        return lendingTokensSet.values();\\n    }\\n\\n    /**\\n     * @notice Lets the DAO/owner of the protocol add an authorized lending token.\\n     * @param _lendingToken The contract address of the lending token.\\n     */\\n    function addLendingToken(address _lendingToken) public onlyOwner {\\n        require(_lendingToken.isContract(), \\\"Incorrect lending token address\\\");\\n        lendingTokensSet.add(_lendingToken);\\n    }\\n\\n    /**\\n     * @notice Lets the DAO/owner of the protocol remove an authorized lending token.\\n     * @param _lendingToken The contract address of the lending token.\\n     */\\n    function removeLendingToken(address _lendingToken) public onlyOwner {\\n        lendingTokensSet.remove(_lendingToken);\\n    }\\n}\\n\\nlibrary V2Calculations {\\n    using NumbersLib for uint256;\\n\\n    /**\\n     * @notice Returns the timestamp of the last payment made for a loan.\\n     * @param _bid The loan bid struct to get the timestamp for.\\n     */\\n    function lastRepaidTimestamp(TellerV2.Bid storage _bid)\\n        internal\\n        view\\n        returns (uint32)\\n    {\\n        return\\n            _bid.loanDetails.lastRepaidTimestamp == 0\\n                ? _bid.loanDetails.acceptedTimestamp\\n                : _bid.loanDetails.lastRepaidTimestamp;\\n    }\\n\\n    /**\\n     * @notice Calculates the amount owed for a loan.\\n     * @param _bid The loan bid struct to get the owed amount for.\\n     * @param _timestamp The timestamp at which to get the owed amount at.\\n     */\\n    function calculateAmountOwed(TellerV2.Bid storage _bid, uint256 _timestamp)\\n        internal\\n        view\\n        returns (TellerV2.Payment memory owed_)\\n    {\\n        owed_.principal =\\n            _bid.loanDetails.principal -\\n            _bid.loanDetails.totalRepaid.principal;\\n        uint256 interestOwedInAYear = owed_.principal.percent(_bid.terms.APY);\\n        uint256 owedTime = _timestamp - uint256(lastRepaidTimestamp(_bid));\\n        owed_.interest = (interestOwedInAYear * owedTime) / 365 days;\\n    }\\n}\\n\",\"keccak256\":\"0x9d70cf28526eed36a47862f8f443192112bb55de61fe6bef57861f86da7a7dc5\",\"license\":\"MIT\"},\"contracts/interfaces/IMarketRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IMarketRegistry {\\n    function isVerifiedLender(uint256 _marketId, address _lender)\\n        external\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xe8cd48f64d0504c1f95b426a6f9fd42e94933394c7c908f582eec959ae489929\",\"license\":\"MIT\"},\"contracts/libraries/NumbersLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Libraries\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\n/**\\n * @dev Utility library for uint256 numbers\\n *\\n * @author develop@teller.finance\\n */\\nlibrary NumbersLib {\\n    /**\\n     * @dev It represents 100% with 2 decimal places.\\n     */\\n    uint16 internal constant PCT_100 = 10000;\\n\\n    /**\\n     * @notice Returns a percentage value of a number.\\n     * @param self The number to get a percentage of.\\n     * @param percentage The percentage value to calculate with 2 decimal places (10000 = 100%).\\n     */\\n    function percent(uint256 self, uint16 percentage)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (self * uint256(percentage)) / uint256(PCT_100);\\n    }\\n\\n    /**\\n     * @notice it returns the absolute number of a specified parameter\\n     * @param self the number to be returned in it's absolute\\n     * @return the absolute number\\n     */\\n    function abs(int256 self) internal pure returns (uint256) {\\n        return self >= 0 ? uint256(self) : uint256(-1 * self);\\n    }\\n\\n    /**\\n     * @notice Returns a ratio percentage of {num1} to {num2}.\\n     * @param num1 The number used to get the ratio for.\\n     * @param num2 The number used to get the ratio from.\\n     * @return Ratio percentage with 2 decimal places (10000 = 100%).\\n     */\\n    function ratioOf(uint256 num1, uint256 num2)\\n        internal\\n        pure\\n        returns (uint16)\\n    {\\n        return num2 == 0 ? 0 : SafeCast.toUint16((num1 * PCT_100) / num2);\\n    }\\n}\\n\",\"keccak256\":\"0x99a1d716289ff32fa672c97de6cd230d24fc7056e31a2dfc9fa6e9391b6f57ef\",\"license\":\"MIT\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary TransferHelper {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice Extension of SafeERC20 to transfer an amount with a fee sent to a specified recipient.\\n     * @param token The ERC20 token contract address to use.\\n     * @param from The address of the sender.\\n     * @param to The address of the primary receiver.\\n     * @param amount The amount to send to the primary receiver.\\n     * @param feeRecipient The address of the fee recipient.\\n     * @param feeAmount The fee amount to send the fee recipient from the sender.\\n     */\\n    function transferFromWithFee(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        address feeRecipient,\\n        uint256 feeAmount\\n    ) internal {\\n        // Do the actual transfer\\n        token.safeTransferFrom(from, to, amount);\\n\\n        // Transfer the fee\\n        token.safeTransferFrom(from, feeRecipient, feeAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x73b4520716a962fe8f192c567d552e8e49915ad0f18410b86cdfa64a2a070e8a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600060665534801561001557600080fd5b506125d3806100256000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80638ac47319116100f9578063ae48043611610097578063d76ac91f11610071578063d76ac91f14610494578063d974cc57146104a7578063e4467f35146104ba578063f2fde38b146104cd57600080fd5b8063ae48043614610458578063b0e21e8a1461046b578063d4eda4cf1461048157600080fd5b80639a11e339116100d35780639a11e3391461040c578063a51e2bad1461041f578063a75021ba14610432578063a8cb5d681461044557600080fd5b80638ac47319146103d55780638da5cb5b146103de5780639703ef35146103f957600080fd5b8063528e0bc5116101665780636c6ca79c116101405780636c6ca79c1461037f578063706a43c314610392578063715018a6146103ba5780638a700b53146103c257600080fd5b8063528e0bc514610337578063697b817c146103575780636aedfe681461036c57600080fd5b8063093f5617146101ae5780631042b85f146101d6578063235d5a7b146101f65780633783530e1461020b5780633819bcdc146102225780634423c5f114610235575b600080fd5b6101c16101bc3660046120cd565b6104e0565b60405190151581526020015b60405180910390f35b6101e96101e43660046120e6565b61057d565b6040516101cd9190612321565b6101fe610610565b6040516101cd9190612241565b610214606a5481565b6040519081526020016101cd565b610214610230366004611efb565b610621565b6103236102433660046120cd565b60676020908152600091825260409182902080546001820154600283015460038401546004850154875160e08101895260058701546001600160a01b0390811682526006880154828a01528951808b018b52600789015481526008890154818b0152828b0152600988015463ffffffff8082166060850152600160201b80830482166080860152600160401b8304821660a0860152600160601b909204811660c08501528b51808d01909c52600a8a01549081168c520461ffff16988a0198909852600b9096015494871697938716969092169490939192909160ff1688565b6040516101cd989796959493929190612172565b610214610345366004611ee0565b60696020526000908152604090205481565b61036a610365366004611fde565b610652565b005b6101e961037a3660046120e6565b610839565b6101e961038d3660046120cd565b6108e3565b6103a56103a03660046120cd565b61098d565b60405163ffffffff90911681526020016101cd565b61036a610b1e565b61036a6103d03660046120e6565b610b54565b61021460665481565b6033546040516001600160a01b0390911681526020016101cd565b61036a6104073660046120cd565b610c78565b61036a61041a3660046120cd565b610db3565b6103a561042d3660046120cd565b610e4d565b61036a610440366004611ee0565b610edd565b61036a6104533660046120cd565b610f16565b61036a610466366004611f25565b6111a1565b60655460405161ffff90911681526020016101cd565b61036a61048f3660046120cd565b61134f565b61036a6104a2366004611ee0565b611403565b6101e96104b53660046120cd565b61148f565b61036a6104c8366004611fc3565b61153d565b61036a6104db366004611ee0565b6115d1565b60408051808201909152600d81526c69735061796d656e744c61746560981b6020820152600090829060036000838152606760205260409020600b015460ff16600481111561053157610531612545565b1461055c5781816040516347bc33cb60e11b8152600401610553929190612385565b60405180910390fd5b6105658461098d565b63ffffffff164263ffffffff161192505b5050919050565b604080518082019091526000808252602082015260008381526067602052604090206009810154600160201b900463ffffffff168310156105fc5760405162461bcd60e51b81526020600482015260196024820152781d1a5b595cdd185b5c081899599bdc99481858d8d95c1d1959603a1b6044820152606401610553565b6106068184611669565b9150505b92915050565b606061061c606b6116f7565b905090565b6068602052816000526040600020818154811061063d57600080fd5b90600052602060002001600091509150505481565b600054610100900460ff1661066d5760005460ff1615610671565b303b155b6106d45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610553565b600054610100900460ff161580156106f6576000805461ffff19166101011790555b6106ff8461170b565b606d80546001600160a01b0319166001600160a01b03851617905581516107685760405162461bcd60e51b815260206004820152601b60248201527f4e6f206c656e64696e6720746f6b656e732073706563696669656400000000006044820152606401610553565b60005b8251811015610820576107a083828151811061078957610789612571565b60200260200101516001600160a01b03163b151590565b6107ec5760405162461bcd60e51b815260206004820152601a60248201527f6c656e64696e6720746f6b656e206e6f7420636f6e74726163740000000000006044820152606401610553565b61080e83828151811061080157610801612571565b6020026020010151611403565b80610818816124fe565b91505061076b565b508015610833576000805461ff00191690555b50505050565b604080518082019091526000808252602082015260008381526067602052604090206009810154600160201b900463ffffffff168310156108b85760405162461bcd60e51b81526020600482015260196024820152781d1a5b595cdd185b5c081899599bdc99481858d8d95c1d1959603a1b6044820152606401610553565b610606816108c68386611669565b604080518082019091526000808252602082015290518152919050565b604080518082019091526000808252602082015260408051808201909152601381527218d85b18dd5b185d19505b5bdd5b9d13ddd959606a1b6020820152829060036000838152606760205260409020600b015460ff16600481111561094b5761094b612545565b1461096d5781816040516347bc33cb60e11b8152600401610553929190612385565b60008481526067602052604090206109859042611669565b949350505050565b60408051808201909152601481527363616c63756c6174654e6578744475654461746560601b6020820152600090829060036000838152606760205260409020600b015460ff1660048111156109e5576109e5612545565b14610a075781816040516347bc33cb60e11b8152600401610553929190612385565b60008481526067602052604090206009810154600160601b900463ffffffff1615610a6f576009810154600090610a549063ffffffff600160601b8204811691600160201b9004166123ec565b90508063ffffffff16421115610a6d5793506105769050565b505b600a8101546009820154610a939163ffffffff90811691600160201b9004166123ec565b6009820154909450600090600160201b900463ffffffff16610ab487610e4d565b610abe91906124ad565b905063ffffffff811615610b1557600a820154600090610ae49063ffffffff1683612428565b610aef9060016123ec565b600a840154909150610b079063ffffffff168261246a565b610b1190876123ec565b9550505b50505050919050565b6033546001600160a01b03163314610b485760405162461bcd60e51b8152600401610553906122a1565b610b526000611743565b565b6040805180820190915260098152683932b830bca637b0b760b91b6020820152829060036000838152606760205260409020600b015460ff166004811115610b9e57610b9e612545565b14610bc05781816040516347bc33cb60e11b8152600401610553929190612385565b600084815260676020526040812090610bd98242611669565b6040805180820190915260008082526020820181905282518083529293509091610c0390826123d4565b905080871015610c365760405162dd9d0f60e61b8152600481018990526024810188905260448101829052606401610553565b600060405180604001604052808460000151815260200184600001518a610c5d9190612496565b90529050610c6d89868387611795565b505050505050505050565b60408051808201909152600981526818d85b98d95b109a5960ba1b6020820152819060016000838152606760205260409020600b015460ff166004811115610cc257610cc2612545565b14610ce45781816040516347bc33cb60e11b8152600401610553929190612338565b600083815260676020526040902080546001600160a01b03163314610d73576040516347bc33cb60e11b81526004810185905260606024820152600960648201526818d85b98d95b109a5960ba1b608482015260a06044820152601e60a48201527f4f6e6c792074686520626964206f776e65722063616e2063616e63656c21000060c482015260e401610553565b600b8101805460ff1916600217905560405184907fa0633b09ac3029a6746aa27d4db1407f5f287a10c41a6b2ad2859f4da9b2680b90600090a250505050565b6040805180820190915260098152683932b830bca637b0b760b91b6020820152819060036000838152606760205260409020600b015460ff166004811115610dfd57610dfd612545565b14610e1f5781816040516347bc33cb60e11b8152600401610553929190612385565b600083815260676020526040812090610e388242611669565b9050610e4685838384611795565b5050505050565b60408051808201909152601381527206c61737452657061696454696d657374616d7606c1b6020820152600090829060036000838152606760205260409020600b015460ff166004811115610ea457610ea4612545565b14610ec65781816040516347bc33cb60e11b8152600401610553929190612385565b600084815260676020526040902061098590611941565b6033546001600160a01b03163314610f075760405162461bcd60e51b8152600401610553906122a1565b610f12606b82611987565b5050565b60408051808201909152600f81526e1b195b99195c9058d8d95c1d109a59608a1b6020820152819060016000838152606760205260409020600b015460ff166004811115610f6657610f66612545565b14610f885781816040516347bc33cb60e11b8152600401610553929190612338565b6000838152606760205260409020606d5460038201546001600160a01b0390911690633ef19a9b90336040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401602060405180830381600087803b158015610ff857600080fd5b505af115801561100c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110309190611fa1565b6110725760405162461bcd60e51b81526020600482015260136024820152722737ba103b32b934b334b2b2103632b73232b960691b6044820152606401610553565b60098101805467ffffffff000000001916600160201b4263ffffffff1602179055600b81018054600360ff199091161790556002810180546001600160a01b0319163317905560655460068201546000916110d1919061ffff1661199c565b905060008183600501600101546110e89190612496565b90506111273360018501546001600160a01b03168361110f6033546001600160a01b031690565b60058801546001600160a01b031693929190876119b9565b6006830154336000908152606960205260408120805490919061114b9084906123d4565b90915550506006830154606a80546000906111679084906123d4565b9091555050604051339087907fde9d3bfa8771df6761c0afac2375c88c70a3aa30478e1bd15363294033b470ed90600090a3505050505050565b6111ac606b886119e3565b6111f85760405162461bcd60e51b815260206004820152601c60248201527f4c656e64696e6720746f6b656e206e6f7420617574686f72697a6564000000006044820152606401610553565b606654600090815260676020526040902080546001600160a01b031916331781556001600160a01b03821661122d573361122f565b815b600182810180546001600160a01b03199081166001600160a01b03948516908117909255600385018b90556005850180549091168c85161790556006840189905560098401805463ffffffff19164263ffffffff90811691909117909155600a8501805491891665ffffffffffff1990921691909117600160201b61ffff8b160217905560048401869055600b8401805460ff1916909217909155825460665460408051938452518794929092169290917ff887b1f393f43fb94c5d50483df4bd410ffbf286128c5f24ff56c580ac7f731c9181900360200190a4336000908152606860209081526040822060668054825460018101845592855292842090910191909155805491611340836124fe565b91905055505050505050505050565b6040805180820190915260098152683932b830bca637b0b760b91b6020820152819060036000838152606760205260409020600b015460ff16600481111561139957611399612545565b146113bb5781816040516347bc33cb60e11b8152600401610553929190612385565b6000838152606760205260408120906113d48242611669565b6040805180820190915260008082526020820152815181529091506113fb86848385611795565b505050505050565b6033546001600160a01b0316331461142d5760405162461bcd60e51b8152600401610553906122a1565b6001600160a01b0381163b6114845760405162461bcd60e51b815260206004820152601f60248201527f496e636f7272656374206c656e64696e6720746f6b656e2061646472657373006044820152606401610553565b610f12606b82611a05565b604080518082019091526000808252602082015260408051808201909152601281527163616c63756c617465416d6f756e7444756560701b6020820152829060036000838152606760205260409020600b015460ff1660048111156114f6576114f6612545565b146115185781816040516347bc33cb60e11b8152600401610553929190612385565b6000848152606760205260409020611534816108c68142611669565b95945050505050565b6033546001600160a01b031633146115675760405162461bcd60e51b8152600401610553906122a1565b60655461ffff8281169116141561157b5750565b6065805461ffff83811661ffff198316811790935560408051938452911660208301819052917f4810ece076cee6c6042808956f3f65dad1bc72b75181341d7bed810d39deda0f910160405180910390a1505b50565b6033546001600160a01b031633146115fb5760405162461bcd60e51b8152600401610553906122a1565b6001600160a01b0381166116605760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610553565b6115ce81611743565b6040805180820190915260008082526020820152600883015460068401546116919190612496565b60208201819052600a8401546000916116b491600160201b900461ffff1661199c565b905060006116c185611941565b6116d19063ffffffff1685612496565b90506301e133806116e2828461244b565b6116ec9190612414565b835250909392505050565b6060600061170483611a1a565b9392505050565b600054610100900460ff166117325760405162461bcd60e51b8152600401610553906122d6565b61173a611a76565b6115ce81611aad565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b815160208301516000916117a8916123d4565b90506000826000015183602001516117c091906123d4565b905080821061180d57600b8501805460ff19166004179055604051909150819086907f9a7851747cd7ffb3fe0a32caf3da48b31f27cebe131267051640f8b72fc4718690600090a2611839565b60405186907f68ca97895fe2d09eab47e752271728ade667e72dda27e68c20eaa191a9c2187d90600090a25b60058501546001600160a01b03166323b872dd33600288015460405160e084901b6001600160e01b03191681526001600160a01b0392831660048201529116602482015260448101859052606401602060405180830381600087803b1580156118a157600080fd5b505af11580156118b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d99190611fa1565b5060208401516008860180546000906118f39084906123d4565b9091555050835160078601805460009061190e9084906123d4565b9091555050505060099290920180546bffffffff00000000000000001916600160401b4263ffffffff1602179055505050565b6009810154600090600160401b900463ffffffff1615611972576009820154600160401b900463ffffffff1661060a565b5060090154600160201b900463ffffffff1690565b6000611704836001600160a01b038416611add565b60006127106119af61ffff84168561244b565b6117049190612414565b6119ce6001600160a01b038716868686611bd0565b6113fb6001600160a01b038716868484611bd0565b6001600160a01b03811660009081526001830160205260408120541515611704565b6000611704836001600160a01b038416611c2a565b606081600001805480602002602001604051908101604052809291908181526020018280548015611a6a57602002820191906000526020600020905b815481526020019060010190808311611a56575b50505050509050919050565b600054610100900460ff16611a9d5760405162461bcd60e51b8152600401610553906122d6565b611aa5611c79565b610b52611ca0565b600054610100900460ff16611ad45760405162461bcd60e51b8152600401610553906122d6565b6115ce8161153d565b60008181526001830160205260408120548015611bc6576000611b01600183612496565b8554909150600090611b1590600190612496565b9050818114611b7a576000866000018281548110611b3557611b35612571565b9060005260206000200154905080876000018481548110611b5857611b58612571565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611b8b57611b8b61255b565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061060a565b600091505061060a565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610833908590611cd0565b6000818152600183016020526040812054611c715750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561060a565b50600061060a565b600054610100900460ff16610b525760405162461bcd60e51b8152600401610553906122d6565b600054610100900460ff16611cc75760405162461bcd60e51b8152600401610553906122d6565b610b5233611743565b6000611d25826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611da79092919063ffffffff16565b805190915015611da25780806020019051810190611d439190611fa1565b611da25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610553565b505050565b6060610985848460008585843b611e005760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610553565b600080866001600160a01b03168587604051611e1c9190612156565b60006040518083038185875af1925050503d8060008114611e59576040519150601f19603f3d011682016040523d82523d6000602084013e611e5e565b606091505b5091509150611e6e828286611e79565b979650505050505050565b60608315611e88575081611704565b825115611e985782518084602001fd5b8160405162461bcd60e51b8152600401610553919061228e565b80356001600160a01b0381168114611ec957600080fd5b919050565b803561ffff81168114611ec957600080fd5b600060208284031215611ef257600080fd5b61170482611eb2565b60008060408385031215611f0e57600080fd5b611f1783611eb2565b946020939093013593505050565b600080600080600080600060e0888a031215611f4057600080fd5b611f4988611eb2565b96506020880135955060408801359450611f6560608901611ece565b9350608088013563ffffffff81168114611f7e57600080fd5b925060a08801359150611f9360c08901611eb2565b905092959891949750929550565b600060208284031215611fb357600080fd5b8151801515811461170457600080fd5b600060208284031215611fd557600080fd5b61170482611ece565b600080600060608486031215611ff357600080fd5b611ffc84611ece565b9250602061200b818601611eb2565b9250604085013567ffffffffffffffff8082111561202857600080fd5b818701915087601f83011261203c57600080fd5b81358181111561204e5761204e612587565b8060051b604051601f19603f8301168101818110858211171561207357612073612587565b604052828152858101935084860182860187018c101561209257600080fd5b600095505b838610156120bc576120a881611eb2565b855260019590950194938601938601612097565b508096505050505050509250925092565b6000602082840312156120df57600080fd5b5035919050565b600080604083850312156120f957600080fd5b50508035926020909101359150565b6005811061212657634e487b7160e01b600052602160045260246000fd5b9052565b600081518084526121428160208601602086016124d2565b601f01601f19169290920160200192915050565b600082516121688184602087016124d2565b9190910192915050565b60006102008201905060018060a01b03808b168352808a16602084015280891660408401528760608401528660808401528086511660a084015250602085015160c083015260408501516121d360e084018280518252602090810151910152565b50606085015163ffffffff9081166101208401526080860151811661014084015260a0860151811661016084015260c086015181166101808401528451166101a0830152602084015161ffff166101c08301526122346101e0830184612108565b9998505050505050505050565b6020808252825182820181905260009190848201906040850190845b818110156122825783516001600160a01b03168352928401929184019160010161225d565b50909695505050505050565b602081526000611704602083018461212a565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b81518152602080830151908201526040810161060a565b828152606060208201526000612351606083018461212a565b8281036040938401526013815272426964206d7573742062652070656e64696e6760681b6020820152919091019392505050565b82815260606020820152600061239e606083018461212a565b8281036040938401526015815274131bd85b881b5d5cdd081899481858d8d95c1d1959605a1b6020820152919091019392505050565b600082198211156123e7576123e7612519565b500190565b600063ffffffff80831681851680830382111561240b5761240b612519565b01949350505050565b6000826124235761242361252f565b500490565b600063ffffffff8084168061243f5761243f61252f565b92169190910492915050565b600081600019048311821515161561246557612465612519565b500290565b600063ffffffff8083168185168183048111821515161561248d5761248d612519565b02949350505050565b6000828210156124a8576124a8612519565b500390565b600063ffffffff838116908316818110156124ca576124ca612519565b039392505050565b60005b838110156124ed5781810151838201526020016124d5565b838111156108335750506000910152565b600060001982141561251257612512612519565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212207514c8d8b43d967206d05834193e5f0ff24564feb126fa82ed13f0f26310691964736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c80638ac47319116100f9578063ae48043611610097578063d76ac91f11610071578063d76ac91f14610494578063d974cc57146104a7578063e4467f35146104ba578063f2fde38b146104cd57600080fd5b8063ae48043614610458578063b0e21e8a1461046b578063d4eda4cf1461048157600080fd5b80639a11e339116100d35780639a11e3391461040c578063a51e2bad1461041f578063a75021ba14610432578063a8cb5d681461044557600080fd5b80638ac47319146103d55780638da5cb5b146103de5780639703ef35146103f957600080fd5b8063528e0bc5116101665780636c6ca79c116101405780636c6ca79c1461037f578063706a43c314610392578063715018a6146103ba5780638a700b53146103c257600080fd5b8063528e0bc514610337578063697b817c146103575780636aedfe681461036c57600080fd5b8063093f5617146101ae5780631042b85f146101d6578063235d5a7b146101f65780633783530e1461020b5780633819bcdc146102225780634423c5f114610235575b600080fd5b6101c16101bc3660046120cd565b6104e0565b60405190151581526020015b60405180910390f35b6101e96101e43660046120e6565b61057d565b6040516101cd9190612321565b6101fe610610565b6040516101cd9190612241565b610214606a5481565b6040519081526020016101cd565b610214610230366004611efb565b610621565b6103236102433660046120cd565b60676020908152600091825260409182902080546001820154600283015460038401546004850154875160e08101895260058701546001600160a01b0390811682526006880154828a01528951808b018b52600789015481526008890154818b0152828b0152600988015463ffffffff8082166060850152600160201b80830482166080860152600160401b8304821660a0860152600160601b909204811660c08501528b51808d01909c52600a8a01549081168c520461ffff16988a0198909852600b9096015494871697938716969092169490939192909160ff1688565b6040516101cd989796959493929190612172565b610214610345366004611ee0565b60696020526000908152604090205481565b61036a610365366004611fde565b610652565b005b6101e961037a3660046120e6565b610839565b6101e961038d3660046120cd565b6108e3565b6103a56103a03660046120cd565b61098d565b60405163ffffffff90911681526020016101cd565b61036a610b1e565b61036a6103d03660046120e6565b610b54565b61021460665481565b6033546040516001600160a01b0390911681526020016101cd565b61036a6104073660046120cd565b610c78565b61036a61041a3660046120cd565b610db3565b6103a561042d3660046120cd565b610e4d565b61036a610440366004611ee0565b610edd565b61036a6104533660046120cd565b610f16565b61036a610466366004611f25565b6111a1565b60655460405161ffff90911681526020016101cd565b61036a61048f3660046120cd565b61134f565b61036a6104a2366004611ee0565b611403565b6101e96104b53660046120cd565b61148f565b61036a6104c8366004611fc3565b61153d565b61036a6104db366004611ee0565b6115d1565b60408051808201909152600d81526c69735061796d656e744c61746560981b6020820152600090829060036000838152606760205260409020600b015460ff16600481111561053157610531612545565b1461055c5781816040516347bc33cb60e11b8152600401610553929190612385565b60405180910390fd5b6105658461098d565b63ffffffff164263ffffffff161192505b5050919050565b604080518082019091526000808252602082015260008381526067602052604090206009810154600160201b900463ffffffff168310156105fc5760405162461bcd60e51b81526020600482015260196024820152781d1a5b595cdd185b5c081899599bdc99481858d8d95c1d1959603a1b6044820152606401610553565b6106068184611669565b9150505b92915050565b606061061c606b6116f7565b905090565b6068602052816000526040600020818154811061063d57600080fd5b90600052602060002001600091509150505481565b600054610100900460ff1661066d5760005460ff1615610671565b303b155b6106d45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610553565b600054610100900460ff161580156106f6576000805461ffff19166101011790555b6106ff8461170b565b606d80546001600160a01b0319166001600160a01b03851617905581516107685760405162461bcd60e51b815260206004820152601b60248201527f4e6f206c656e64696e6720746f6b656e732073706563696669656400000000006044820152606401610553565b60005b8251811015610820576107a083828151811061078957610789612571565b60200260200101516001600160a01b03163b151590565b6107ec5760405162461bcd60e51b815260206004820152601a60248201527f6c656e64696e6720746f6b656e206e6f7420636f6e74726163740000000000006044820152606401610553565b61080e83828151811061080157610801612571565b6020026020010151611403565b80610818816124fe565b91505061076b565b508015610833576000805461ff00191690555b50505050565b604080518082019091526000808252602082015260008381526067602052604090206009810154600160201b900463ffffffff168310156108b85760405162461bcd60e51b81526020600482015260196024820152781d1a5b595cdd185b5c081899599bdc99481858d8d95c1d1959603a1b6044820152606401610553565b610606816108c68386611669565b604080518082019091526000808252602082015290518152919050565b604080518082019091526000808252602082015260408051808201909152601381527218d85b18dd5b185d19505b5bdd5b9d13ddd959606a1b6020820152829060036000838152606760205260409020600b015460ff16600481111561094b5761094b612545565b1461096d5781816040516347bc33cb60e11b8152600401610553929190612385565b60008481526067602052604090206109859042611669565b949350505050565b60408051808201909152601481527363616c63756c6174654e6578744475654461746560601b6020820152600090829060036000838152606760205260409020600b015460ff1660048111156109e5576109e5612545565b14610a075781816040516347bc33cb60e11b8152600401610553929190612385565b60008481526067602052604090206009810154600160601b900463ffffffff1615610a6f576009810154600090610a549063ffffffff600160601b8204811691600160201b9004166123ec565b90508063ffffffff16421115610a6d5793506105769050565b505b600a8101546009820154610a939163ffffffff90811691600160201b9004166123ec565b6009820154909450600090600160201b900463ffffffff16610ab487610e4d565b610abe91906124ad565b905063ffffffff811615610b1557600a820154600090610ae49063ffffffff1683612428565b610aef9060016123ec565b600a840154909150610b079063ffffffff168261246a565b610b1190876123ec565b9550505b50505050919050565b6033546001600160a01b03163314610b485760405162461bcd60e51b8152600401610553906122a1565b610b526000611743565b565b6040805180820190915260098152683932b830bca637b0b760b91b6020820152829060036000838152606760205260409020600b015460ff166004811115610b9e57610b9e612545565b14610bc05781816040516347bc33cb60e11b8152600401610553929190612385565b600084815260676020526040812090610bd98242611669565b6040805180820190915260008082526020820181905282518083529293509091610c0390826123d4565b905080871015610c365760405162dd9d0f60e61b8152600481018990526024810188905260448101829052606401610553565b600060405180604001604052808460000151815260200184600001518a610c5d9190612496565b90529050610c6d89868387611795565b505050505050505050565b60408051808201909152600981526818d85b98d95b109a5960ba1b6020820152819060016000838152606760205260409020600b015460ff166004811115610cc257610cc2612545565b14610ce45781816040516347bc33cb60e11b8152600401610553929190612338565b600083815260676020526040902080546001600160a01b03163314610d73576040516347bc33cb60e11b81526004810185905260606024820152600960648201526818d85b98d95b109a5960ba1b608482015260a06044820152601e60a48201527f4f6e6c792074686520626964206f776e65722063616e2063616e63656c21000060c482015260e401610553565b600b8101805460ff1916600217905560405184907fa0633b09ac3029a6746aa27d4db1407f5f287a10c41a6b2ad2859f4da9b2680b90600090a250505050565b6040805180820190915260098152683932b830bca637b0b760b91b6020820152819060036000838152606760205260409020600b015460ff166004811115610dfd57610dfd612545565b14610e1f5781816040516347bc33cb60e11b8152600401610553929190612385565b600083815260676020526040812090610e388242611669565b9050610e4685838384611795565b5050505050565b60408051808201909152601381527206c61737452657061696454696d657374616d7606c1b6020820152600090829060036000838152606760205260409020600b015460ff166004811115610ea457610ea4612545565b14610ec65781816040516347bc33cb60e11b8152600401610553929190612385565b600084815260676020526040902061098590611941565b6033546001600160a01b03163314610f075760405162461bcd60e51b8152600401610553906122a1565b610f12606b82611987565b5050565b60408051808201909152600f81526e1b195b99195c9058d8d95c1d109a59608a1b6020820152819060016000838152606760205260409020600b015460ff166004811115610f6657610f66612545565b14610f885781816040516347bc33cb60e11b8152600401610553929190612338565b6000838152606760205260409020606d5460038201546001600160a01b0390911690633ef19a9b90336040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401602060405180830381600087803b158015610ff857600080fd5b505af115801561100c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110309190611fa1565b6110725760405162461bcd60e51b81526020600482015260136024820152722737ba103b32b934b334b2b2103632b73232b960691b6044820152606401610553565b60098101805467ffffffff000000001916600160201b4263ffffffff1602179055600b81018054600360ff199091161790556002810180546001600160a01b0319163317905560655460068201546000916110d1919061ffff1661199c565b905060008183600501600101546110e89190612496565b90506111273360018501546001600160a01b03168361110f6033546001600160a01b031690565b60058801546001600160a01b031693929190876119b9565b6006830154336000908152606960205260408120805490919061114b9084906123d4565b90915550506006830154606a80546000906111679084906123d4565b9091555050604051339087907fde9d3bfa8771df6761c0afac2375c88c70a3aa30478e1bd15363294033b470ed90600090a3505050505050565b6111ac606b886119e3565b6111f85760405162461bcd60e51b815260206004820152601c60248201527f4c656e64696e6720746f6b656e206e6f7420617574686f72697a6564000000006044820152606401610553565b606654600090815260676020526040902080546001600160a01b031916331781556001600160a01b03821661122d573361122f565b815b600182810180546001600160a01b03199081166001600160a01b03948516908117909255600385018b90556005850180549091168c85161790556006840189905560098401805463ffffffff19164263ffffffff90811691909117909155600a8501805491891665ffffffffffff1990921691909117600160201b61ffff8b160217905560048401869055600b8401805460ff1916909217909155825460665460408051938452518794929092169290917ff887b1f393f43fb94c5d50483df4bd410ffbf286128c5f24ff56c580ac7f731c9181900360200190a4336000908152606860209081526040822060668054825460018101845592855292842090910191909155805491611340836124fe565b91905055505050505050505050565b6040805180820190915260098152683932b830bca637b0b760b91b6020820152819060036000838152606760205260409020600b015460ff16600481111561139957611399612545565b146113bb5781816040516347bc33cb60e11b8152600401610553929190612385565b6000838152606760205260408120906113d48242611669565b6040805180820190915260008082526020820152815181529091506113fb86848385611795565b505050505050565b6033546001600160a01b0316331461142d5760405162461bcd60e51b8152600401610553906122a1565b6001600160a01b0381163b6114845760405162461bcd60e51b815260206004820152601f60248201527f496e636f7272656374206c656e64696e6720746f6b656e2061646472657373006044820152606401610553565b610f12606b82611a05565b604080518082019091526000808252602082015260408051808201909152601281527163616c63756c617465416d6f756e7444756560701b6020820152829060036000838152606760205260409020600b015460ff1660048111156114f6576114f6612545565b146115185781816040516347bc33cb60e11b8152600401610553929190612385565b6000848152606760205260409020611534816108c68142611669565b95945050505050565b6033546001600160a01b031633146115675760405162461bcd60e51b8152600401610553906122a1565b60655461ffff8281169116141561157b5750565b6065805461ffff83811661ffff198316811790935560408051938452911660208301819052917f4810ece076cee6c6042808956f3f65dad1bc72b75181341d7bed810d39deda0f910160405180910390a1505b50565b6033546001600160a01b031633146115fb5760405162461bcd60e51b8152600401610553906122a1565b6001600160a01b0381166116605760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610553565b6115ce81611743565b6040805180820190915260008082526020820152600883015460068401546116919190612496565b60208201819052600a8401546000916116b491600160201b900461ffff1661199c565b905060006116c185611941565b6116d19063ffffffff1685612496565b90506301e133806116e2828461244b565b6116ec9190612414565b835250909392505050565b6060600061170483611a1a565b9392505050565b600054610100900460ff166117325760405162461bcd60e51b8152600401610553906122d6565b61173a611a76565b6115ce81611aad565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b815160208301516000916117a8916123d4565b90506000826000015183602001516117c091906123d4565b905080821061180d57600b8501805460ff19166004179055604051909150819086907f9a7851747cd7ffb3fe0a32caf3da48b31f27cebe131267051640f8b72fc4718690600090a2611839565b60405186907f68ca97895fe2d09eab47e752271728ade667e72dda27e68c20eaa191a9c2187d90600090a25b60058501546001600160a01b03166323b872dd33600288015460405160e084901b6001600160e01b03191681526001600160a01b0392831660048201529116602482015260448101859052606401602060405180830381600087803b1580156118a157600080fd5b505af11580156118b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d99190611fa1565b5060208401516008860180546000906118f39084906123d4565b9091555050835160078601805460009061190e9084906123d4565b9091555050505060099290920180546bffffffff00000000000000001916600160401b4263ffffffff1602179055505050565b6009810154600090600160401b900463ffffffff1615611972576009820154600160401b900463ffffffff1661060a565b5060090154600160201b900463ffffffff1690565b6000611704836001600160a01b038416611add565b60006127106119af61ffff84168561244b565b6117049190612414565b6119ce6001600160a01b038716868686611bd0565b6113fb6001600160a01b038716868484611bd0565b6001600160a01b03811660009081526001830160205260408120541515611704565b6000611704836001600160a01b038416611c2a565b606081600001805480602002602001604051908101604052809291908181526020018280548015611a6a57602002820191906000526020600020905b815481526020019060010190808311611a56575b50505050509050919050565b600054610100900460ff16611a9d5760405162461bcd60e51b8152600401610553906122d6565b611aa5611c79565b610b52611ca0565b600054610100900460ff16611ad45760405162461bcd60e51b8152600401610553906122d6565b6115ce8161153d565b60008181526001830160205260408120548015611bc6576000611b01600183612496565b8554909150600090611b1590600190612496565b9050818114611b7a576000866000018281548110611b3557611b35612571565b9060005260206000200154905080876000018481548110611b5857611b58612571565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611b8b57611b8b61255b565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061060a565b600091505061060a565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610833908590611cd0565b6000818152600183016020526040812054611c715750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561060a565b50600061060a565b600054610100900460ff16610b525760405162461bcd60e51b8152600401610553906122d6565b600054610100900460ff16611cc75760405162461bcd60e51b8152600401610553906122d6565b610b5233611743565b6000611d25826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611da79092919063ffffffff16565b805190915015611da25780806020019051810190611d439190611fa1565b611da25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610553565b505050565b6060610985848460008585843b611e005760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610553565b600080866001600160a01b03168587604051611e1c9190612156565b60006040518083038185875af1925050503d8060008114611e59576040519150601f19603f3d011682016040523d82523d6000602084013e611e5e565b606091505b5091509150611e6e828286611e79565b979650505050505050565b60608315611e88575081611704565b825115611e985782518084602001fd5b8160405162461bcd60e51b8152600401610553919061228e565b80356001600160a01b0381168114611ec957600080fd5b919050565b803561ffff81168114611ec957600080fd5b600060208284031215611ef257600080fd5b61170482611eb2565b60008060408385031215611f0e57600080fd5b611f1783611eb2565b946020939093013593505050565b600080600080600080600060e0888a031215611f4057600080fd5b611f4988611eb2565b96506020880135955060408801359450611f6560608901611ece565b9350608088013563ffffffff81168114611f7e57600080fd5b925060a08801359150611f9360c08901611eb2565b905092959891949750929550565b600060208284031215611fb357600080fd5b8151801515811461170457600080fd5b600060208284031215611fd557600080fd5b61170482611ece565b600080600060608486031215611ff357600080fd5b611ffc84611ece565b9250602061200b818601611eb2565b9250604085013567ffffffffffffffff8082111561202857600080fd5b818701915087601f83011261203c57600080fd5b81358181111561204e5761204e612587565b8060051b604051601f19603f8301168101818110858211171561207357612073612587565b604052828152858101935084860182860187018c101561209257600080fd5b600095505b838610156120bc576120a881611eb2565b855260019590950194938601938601612097565b508096505050505050509250925092565b6000602082840312156120df57600080fd5b5035919050565b600080604083850312156120f957600080fd5b50508035926020909101359150565b6005811061212657634e487b7160e01b600052602160045260246000fd5b9052565b600081518084526121428160208601602086016124d2565b601f01601f19169290920160200192915050565b600082516121688184602087016124d2565b9190910192915050565b60006102008201905060018060a01b03808b168352808a16602084015280891660408401528760608401528660808401528086511660a084015250602085015160c083015260408501516121d360e084018280518252602090810151910152565b50606085015163ffffffff9081166101208401526080860151811661014084015260a0860151811661016084015260c086015181166101808401528451166101a0830152602084015161ffff166101c08301526122346101e0830184612108565b9998505050505050505050565b6020808252825182820181905260009190848201906040850190845b818110156122825783516001600160a01b03168352928401929184019160010161225d565b50909695505050505050565b602081526000611704602083018461212a565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b81518152602080830151908201526040810161060a565b828152606060208201526000612351606083018461212a565b8281036040938401526013815272426964206d7573742062652070656e64696e6760681b6020820152919091019392505050565b82815260606020820152600061239e606083018461212a565b8281036040938401526015815274131bd85b881b5d5cdd081899481858d8d95c1d1959605a1b6020820152919091019392505050565b600082198211156123e7576123e7612519565b500190565b600063ffffffff80831681851680830382111561240b5761240b612519565b01949350505050565b6000826124235761242361252f565b500490565b600063ffffffff8084168061243f5761243f61252f565b92169190910492915050565b600081600019048311821515161561246557612465612519565b500290565b600063ffffffff8083168185168183048111821515161561248d5761248d612519565b02949350505050565b6000828210156124a8576124a8612519565b500390565b600063ffffffff838116908316818110156124ca576124ca612519565b039392505050565b60005b838110156124ed5781810151838201526020016124d5565b838111156108335750506000910152565b600060001982141561251257612512612519565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212207514c8d8b43d967206d05834193e5f0ff24564feb126fa82ed13f0f26310691964736f6c63430008060033",
  "devdoc": {
    "errors": {
      "ActionNotAllowed(uint256,string,string)": [
        {
          "params": {
            "action": "The action string (i.e: 'repayLoan', 'cancelBid', 'etc)",
            "bidId": "The id of the bid.",
            "message": "The message string to return to the user explaining why the tx was reverted"
          }
        }
      ],
      "PaymentNotMinimum(uint256,uint256,uint256)": [
        {
          "params": {
            "bidId": "The id of the bid the borrower is attempting to repay.",
            "minimumOwed": "The minimum owed value",
            "payment": "The payment made by the borrower"
          }
        }
      ]
    },
    "events": {
      "AcceptedBid(uint256,address)": {
        "params": {
          "bidId": "The id of the bid accepted.",
          "lender": "The address of the accepted bid lender."
        }
      },
      "CancelledBid(uint256)": {
        "params": {
          "bidId": "The id of the cancelled bid."
        }
      },
      "LoanRepaid(uint256)": {
        "params": {
          "bidId": "The id of the bid/loan which was repaid."
        }
      },
      "LoanRepayment(uint256)": {
        "params": {
          "bidId": "The id of the bid/loan to which the payment was made."
        }
      },
      "SubmittedBid(uint256,address,address,bytes32)": {
        "params": {
          "bidId": "The id of the bid submitted.",
          "borrower": "The address of the bid borrower.",
          "metadataURI": "URI for additional bid infomation as part of loan bid."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addLendingToken(address)": {
        "params": {
          "_lendingToken": "The contract address of the lending token."
        }
      },
      "calculateAmountDue(uint256)": {
        "params": {
          "_bidId": "The id of the loan bid to get the payment amount for."
        }
      },
      "calculateAmountDue(uint256,uint256)": {
        "params": {
          "_bidId": "The id of the loan bid to get the payment amount for.",
          "_timestamp": "The timestamp at which to get the due payment at."
        }
      },
      "calculateAmountOwed(uint256)": {
        "params": {
          "_bidId": "The id of the loan bid to caculate the owed amount for."
        }
      },
      "calculateAmountOwed(uint256,uint256)": {
        "params": {
          "_bidId": "The id of the loan bid to caculate the owed amount for.",
          "_timestamp": "The timestamp at which to cacluate the loan owed amount at."
        }
      },
      "calculateNextDueDate(uint256)": {
        "params": {
          "_bidId": "The id of the loan bid."
        }
      },
      "cancelBid(uint256)": {
        "params": {
          "_bidId": "The id of the bid to be cancelled."
        }
      },
      "initialize(uint16,address,address[])": {
        "params": {
          "_lendingTokens": "The list of tokens allowed as lending assets on the protocol.",
          "_protocolFee": "The fee collected by the protocol for loan processing."
        }
      },
      "isPaymentLate(uint256)": {
        "params": {
          "_bidId": "The id of the loan bid to check for."
        }
      },
      "lastRepaidTimestamp(uint256)": {
        "params": {
          "_bidId": "The id of the loan bid to get the timestamp for."
        }
      },
      "lenderAcceptBid(uint256)": {
        "params": {
          "_bidId": "The id of the loan bid to accept."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeLendingToken(address)": {
        "params": {
          "_lendingToken": "The contract address of the lending token."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "repayLoan(uint256,uint256)": {
        "params": {
          "_amount": "The amount of the payment.",
          "_bidId": "The id of the loan to make the payment towards."
        }
      },
      "repayLoanFull(uint256)": {
        "params": {
          "_bidId": "The id of the loan to make the payment towards."
        }
      },
      "repayLoanMinimum(uint256)": {
        "params": {
          "_bidId": "The id of the loan to make the payment towards."
        }
      },
      "setProtocolFee(uint16)": {
        "params": {
          "newFee": "The new protocol fee to be set."
        }
      },
      "submitBid(address,uint256,uint256,uint16,uint32,bytes32,address)": {
        "params": {
          "_APY": "The proposed interest rate for the loan bid.",
          "_lendingToken": "The lending token asset requested to be borrowed.",
          "_metadataURI": "The URI for additional borrower loan infomation as part of loan bid.",
          "_paymentCycle": "The recurrent length of time before which a payment is due.",
          "_principal": "The prinicpal amount of the loan bid."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ActionNotAllowed(uint256,string,string)": [
        {
          "notice": "This error is reverted when the action isn't allowed"
        }
      ],
      "PaymentNotMinimum(uint256,uint256,uint256)": [
        {
          "notice": "This error is reverted when repayment amount is less than the required minimum"
        }
      ]
    },
    "events": {
      "AcceptedBid(uint256,address)": {
        "notice": "This event is emitted when a bid has been accepted by a lender."
      },
      "CancelledBid(uint256)": {
        "notice": "This event is emitted when a previously submitted bid has been cancelled."
      },
      "LoanRepaid(uint256)": {
        "notice": "This event is emitted when a loan has been fully repaid."
      },
      "LoanRepayment(uint256)": {
        "notice": "This event is emitted when a payment is made towards an ative loan."
      },
      "ProtocolFeeSet(uint16,uint16)": {
        "notice": "This event is emitted when the protocol fee has been updated."
      },
      "SubmittedBid(uint256,address,address,bytes32)": {
        "notice": "This event is emitted when a new bid is submitted."
      }
    },
    "kind": "user",
    "methods": {
      "addLendingToken(address)": {
        "notice": "Lets the DAO/owner of the protocol add an authorized lending token."
      },
      "bidId()": {
        "notice": "Storage Variables "
      },
      "calculateAmountDue(uint256)": {
        "notice": "Calculates the minumum payment amount due for a loan."
      },
      "calculateAmountDue(uint256,uint256)": {
        "notice": "Calculates the minumum payment amount due for a loan at a specific timestamp."
      },
      "calculateAmountOwed(uint256)": {
        "notice": "Calculates the total amount owed for a bid."
      },
      "calculateAmountOwed(uint256,uint256)": {
        "notice": "Calculates the total amount owed for a loan bid at a specific timestamp."
      },
      "calculateNextDueDate(uint256)": {
        "notice": "Returns the next due date for a loan payment."
      },
      "cancelBid(uint256)": {
        "notice": "Function for users to cancel a bid."
      },
      "getLendingTokens()": {
        "notice": "Returns the list of authorized tokens on the protocol."
      },
      "initialize(uint16,address,address[])": {
        "notice": "Initializes the proxy."
      },
      "isPaymentLate(uint256)": {
        "notice": "Checks to see if a borrower is delinquent."
      },
      "lastRepaidTimestamp(uint256)": {
        "notice": "Returns the last repaid timestamp for a loan."
      },
      "lenderAcceptBid(uint256)": {
        "notice": "Function for a lender to accept a proposed loan bid."
      },
      "protocolFee()": {
        "notice": "Returns the current protocol fee."
      },
      "removeLendingToken(address)": {
        "notice": "Lets the DAO/owner of the protocol remove an authorized lending token."
      },
      "repayLoan(uint256,uint256)": {
        "notice": "Function for users to make a payment towards an active loan."
      },
      "repayLoanFull(uint256)": {
        "notice": "Function for users to repay an active loan in full."
      },
      "repayLoanMinimum(uint256)": {
        "notice": "Function for users to make the minimum amount due for an active loan."
      },
      "setProtocolFee(uint16)": {
        "notice": "Lets the DAO/owner of the protocol to set a new protocol fee."
      },
      "submitBid(address,uint256,uint256,uint16,uint32,bytes32,address)": {
        "notice": "Function for a borrower to create a bid for a loan."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 132,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 135,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 487,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 124,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6351,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "_protocolFee",
        "offset": 0,
        "slot": "101",
        "type": "t_uint16"
      },
      {
        "astId": 6654,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "bidId",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 6659,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "bids",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_struct(Bid)6639_storage)"
      },
      {
        "astId": 6664,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "borrowerBids",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 6668,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "lenderVolumeFilled",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6670,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "totalVolumeFilled",
        "offset": 0,
        "slot": "106",
        "type": "t_uint256"
      },
      {
        "astId": 6673,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "lendingTokensSet",
        "offset": 0,
        "slot": "107",
        "type": "t_struct(AddressSet)4296_storage"
      },
      {
        "astId": 6676,
        "contract": "contracts/TellerV2.sol:TellerV2",
        "label": "marketRegistry",
        "offset": 0,
        "slot": "109",
        "type": "t_contract(IMarketRegistry)8275"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1263": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMarketRegistry)8275": {
        "encoding": "inplace",
        "label": "contract IMarketRegistry",
        "numberOfBytes": "20"
      },
      "t_enum(BidState)6650": {
        "encoding": "inplace",
        "label": "enum TellerV2.BidState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Bid)6639_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TellerV2.Bid)",
        "numberOfBytes": "32",
        "value": "t_struct(Bid)6639_storage"
      },
      "t_struct(AddressSet)4296_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4295,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3995_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bid)6639_storage": {
        "encoding": "inplace",
        "label": "struct TellerV2.Bid",
        "members": [
          {
            "astId": 6621,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "borrower",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6623,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "receiver",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6625,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "lender",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 6627,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "marketplaceId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6629,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "metadataURI",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes32"
          },
          {
            "astId": 6632,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "loanDetails",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(LoanDetails)6619_storage"
          },
          {
            "astId": 6635,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "terms",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(Terms)6644_storage"
          },
          {
            "astId": 6638,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "state",
            "offset": 0,
            "slot": "11",
            "type": "t_enum(BidState)6650"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(LoanDetails)6619_storage": {
        "encoding": "inplace",
        "label": "struct TellerV2.LoanDetails",
        "members": [
          {
            "astId": 6605,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "lendingToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1263"
          },
          {
            "astId": 6607,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "principal",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6610,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "totalRepaid",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Payment)6602_storage"
          },
          {
            "astId": 6612,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "timestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 6614,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "acceptedTimestamp",
            "offset": 4,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 6616,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "lastRepaidTimestamp",
            "offset": 8,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 6618,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "loanDuration",
            "offset": 12,
            "slot": "4",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Payment)6602_storage": {
        "encoding": "inplace",
        "label": "struct TellerV2.Payment",
        "members": [
          {
            "astId": 6599,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "interest",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6601,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "principal",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3995_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3990,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3994,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Terms)6644_storage": {
        "encoding": "inplace",
        "label": "struct TellerV2.Terms",
        "members": [
          {
            "astId": 6641,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "paymentCycle",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 6643,
            "contract": "contracts/TellerV2.sol:TellerV2",
            "label": "APY",
            "offset": 4,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}